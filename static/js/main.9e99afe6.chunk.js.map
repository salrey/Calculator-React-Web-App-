{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","handleCalculation","event","preventDefault","state","userInputs","listValues","total","display","count","newValue","isNaN","target","textContent","Number","length","pop","setState","Math","round","splice","className","this","toLocaleString","onClick","type","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e99afe6.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nclass Form extends Component {\n    constructor() {\n        super()\n        this.state = {\n            userInputs: [],\n            listValues: \"\",\n            total: 0,\n            display: 0,\n            count: 0\n        }\n    }\n    \n    handleCalculation = (event) => {\n        event.preventDefault();\n        const { userInputs, listValues, total, display, count } = this.state;\n        const newValue = isNaN(listValues+event.target.textContent) ? event.target.textContent : listValues+event.target.textContent;\n\n        if (!isNaN(Number(newValue))) {\n            !isNaN(Number(userInputs[userInputs.length-1])) && userInputs.pop()\n            this.setState({\n                userInputs: [...userInputs, newValue],\n                listValues: newValue,\n                display: newValue\n            })\n        } else {\n            if (userInputs[userInputs.length-2] !== \"undefined\" || !isNaN(Number(userInputs[userInputs.length-2]) || newValue !== \"⁺/-\" || newValue !== \"%\" || newValue !== \"AC\")) {\n                if (!isNaN(Number(userInputs[userInputs.length-1]))) {\n                    this.setState({\n                        userInputs: [...userInputs, newValue],\n                        listValues: \"\"\n                    })\n                } else if (newValue !== userInputs[userInputs.length-1]) {\n                    if (count === 1 && isNaN(Number(userInputs[userInputs.length-1]))) {\n                        userInputs.pop()\n                        this.setState({\n                            userInputs: [...userInputs, newValue],\n                            listValues: \"\",\n                            count: 0\n                        })\n                    } else {\n                        this.setState({\n                            userInputs: [...userInputs, newValue],\n                            listValues: \"\"\n                        })\n                    }\n                } \n                if (newValue === \"＝\" || newValue === \"＋\" || newValue === \"－\" || newValue === \"Ｘ\" || newValue === \"／\") {\n                    this.setState({\n                        count: count + 1\n                    })\n                    \n                    if (userInputs[userInputs.length-2] === \"＋\" || userInputs[userInputs.length-1] === \"＝\" || newValue === \"＋\") {\n                        if ((count === 1 || count === 2) && userInputs.length === 3) {\n                            this.setState({\n                                total: Number(total) + Number(userInputs[userInputs.length-1]) + Number(userInputs[userInputs.length-3]),\n                                display: Number(total) + Number(userInputs[userInputs.length-1]) + Number(userInputs[userInputs.length-3])\n                            })\n                        } else if (userInputs[userInputs.length-1] === \"＝\" && newValue !== \"＋\" && userInputs[userInputs.length-3] === \"＋\") {\n                            this.setState({\n                                total: Number(total) + Number(userInputs[userInputs.length-2]),\n                                display: Number(total) + Number(userInputs[userInputs.length-2])\n                            })\n                        } else if (newValue !== \"＋\") {\n                            this.setState({\n                                total: (Number(total) + Number(userInputs[userInputs.length-1])),\n                                display: (Number(total) + Number(userInputs[userInputs.length-1]))\n                            })\n                        } else if (newValue === \"＋\" && isNaN(Number(userInputs[userInputs.length-1]))) {\n\n                        } else if (count > 1 && newValue === \"＋\" && !isNaN(Number(userInputs[userInputs.length-1]))) {\n                            this.setState({\n                                total: (Number(total) + Number(userInputs[userInputs.length-1])),\n                                display: (Number(display) + Number(userInputs[userInputs.length-1]))\n                            })\n                        }\n                    }\n                    if (userInputs[userInputs.length-2] === \"－\"|| userInputs[userInputs.length-1] === \"＝\" || newValue === \"－\") {\n                        if ((count === 1 || count === 2) && userInputs.length === 3) {\n                            this.setState({\n                                total: total + Number(userInputs[userInputs.length-3]) - Number(userInputs[userInputs.length-1]),\n                                display: total + Number(userInputs[userInputs.length-3]) - Number(userInputs[userInputs.length-1])\n                            })\n                        } else if (userInputs[userInputs.length-1] === \"＝\" && newValue !== \"－\" && userInputs[userInputs.length-3] === \"－\") {\n                            this.setState({\n                                total: (Number(total) - Number(userInputs[userInputs.length-2])),\n                                display: (Number(total) - Number(userInputs[userInputs.length-2]))\n                            })\n                        } else if (newValue !== \"－\") {\n                            this.setState({\n                                total: (Number(total) - Number(userInputs[userInputs.length-1])),\n                                display: (Number(total) - Number(userInputs[userInputs.length-1]))\n                            })\n                        } else if (newValue === \"－\" && isNaN(Number(userInputs[userInputs.length-1]))) {\n                \n                        } else if (count > 1 && newValue === \"－\" && !isNaN(Number(userInputs[userInputs.length-1]))) {\n                            this.setState({\n                                total: Number(total) - Number(userInputs[userInputs.length-1]),\n                                display: Number(total) - Number(userInputs[userInputs.length-1])\n                            })\n                        }\n                    }\n                    if (userInputs[userInputs.length-2] === \"Ｘ\") {\n                        if (!!Number(userInputs[userInputs.length-1])) {\n                            if (count === 1) {\n                                this.setState({\n                                    total: total + Number(userInputs[userInputs.length-3]) * Number(userInputs[userInputs.length-1]),\n                                    display: total + Number(userInputs[userInputs.length-3]) * Number(userInputs[userInputs.length-1])\n                                })\n                            } else {\n                                this.setState({\n                                    total: total * Number(userInputs[userInputs.length-1]),\n                                    display: total * Number(userInputs[userInputs.length-1])\n                                })\n                            }\n                        }\n                    }\n                    if (userInputs[userInputs.length-2] === \"／\") {\n                        if (!!Number(userInputs[userInputs.length-1]) && count === 1) {\n                            this.setState({\n                                total: Math.round(total + Number(userInputs[userInputs.length-3]) / Number(userInputs[userInputs.length-1])),\n                                display: Math.round(total + Number(userInputs[userInputs.length-3]) / Number(userInputs[userInputs.length-1]))\n                            })\n                        } else {\n                            if (!Number(userInputs[userInputs.length-1])) {\n                                this.setState({\n                                    total: 0,\n                                    display: \"Error\"\n                                })  \n                            } else {\n                                this.setState({\n                                    total: total / Number(userInputs[userInputs.length-1]),\n                                    display: total / Number(userInputs[userInputs.length-1])\n                                })\n                            }\n                        }\n                    }\n                }\n            }\n            if (newValue === \"AC\") {\n                if (isNaN(Number(userInputs[userInputs.length-1]))) {\n                    this.setState({\n                        userInputs: [],\n                        listValues: \"\",\n                        total: 0,\n                        display: 0,\n                        count: 0\n                    })\n                } else {\n                    userInputs.pop()\n                    this.setState({\n                        userInputs: userInputs,\n                        listValues: \"\",\n                        display: 0,\n                    })\n                }\n            }\n            if (newValue === \"%\") {\n                this.setState({\n                    total: total / 100,\n                    display: display / 100\n                })\n            }\n            if (newValue === \"⁺/-\") {\n                if (isNaN(Number(userInputs[userInputs.length-1]))){\n                    userInputs.splice(-2, 1, display * -1)\n                    this.setState({\n                        userInputs: userInputs,\n                        display: display * -1,\n                    })\n                } else {\n                    userInputs.splice(-1, 1, display * -1)\n                    this.setState({\n                        userInputs: userInputs,\n                        display: display * -1,\n                    })\n                }\n            }\n            \n        }\n    }\n\n    \n    render() {\n     \n        return (\n            <form>\n                <div className=\"display\">{this.state.display.toLocaleString()}</div>\n                <div className=\"history\"></div>\n                <button className=\"topBar\" onClick={this.handleCalculation}>AC</button>\n                <button className=\"topBar\" onClick={this.handleCalculation}>⁺/-</button>\n                <button className=\"topBar\" onClick={this.handleCalculation}>%</button>\n                <button className=\"operand\" onClick={this.handleCalculation}>／</button>\n                <button className=\"number\" onClick={this.handleCalculation}>7</button>\n                <button className=\"number\" onClick={this.handleCalculation}>8</button>\n                <button className=\"number\" onClick={this.handleCalculation}>9</button>\n                <button className=\"operand\" onClick={this.handleCalculation}>Ｘ</button>\n                <button className=\"number\" onClick={this.handleCalculation}>4</button>\n                <button className=\"number\" onClick={this.handleCalculation}>5</button>\n                <button className=\"number\" onClick={this.handleCalculation}>6</button>\n                <button className=\"operand\" onClick={this.handleCalculation}>－</button>\n                <button className=\"number\" onClick={this.handleCalculation}>1</button>\n                <button className=\"number\" onClick={this.handleCalculation}>2</button>\n                <button className=\"number\" onClick={this.handleCalculation}>3</button>\n                <button className=\"operand\" onClick={this.handleCalculation}>＋</button>\n                <button className=\"zeroNumber\" onClick={this.handleCalculation}>0</button>\n                <button className=\"number\">.</button>\n                <button className=\"operand\"type=\"submit\" onClick={this.handleCalculation}>＝</button>\n            </form>\n        )\n    }\n}\n\nexport default Form;","import './App.css';\nimport Form from './components/Form';\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <Form />\n        </div>\n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}